<service name="RemoteFiles">
	<enum name="Errno">
		<member name="EACCES" />
		<member name="EBADF" />
		<member name="EFAULT" />
		<member name="ELOOP" />
		<member name="ENAMETOOLONG" />
		<member name="ENOENT" />
		<member name="ENOMEM" />
		<member name="ENOTDIR" />
		<member name="EEXIST" />
		<member name="EISDIR" />
		<member name="EPERM" />
		<member name="EROFS" />
		<member name="EWOULDBLOCK" />
	</enum>

	<exception name="UnderlyingIOError">
		<attr name="message" type="str" />
		<attr name="errno" type="Errno" />
	</exception>

	<const name="S_IFIFO" type="int32" value="0x010000" />
	<const name="S_IFCHR" type="int32" value="0x020000" />
	<const name="S_IFDIR" type="int32" value="0x040000" />
	<const name="S_IFBLK" type="int32" value="0x060000" />
	<const name="S_IFREG" type="int32" value="0x100000" />
	<const name="S_IFLNK" type="int32" value="0x120000" />

	<typedef name="st_mode" type="int32" />

	<record name="StatRes">
		<attr name="inode" type="int32" />
		<attr name="mode" type="st_mode" />
		<attr name="size" type="int32" />
		<attr name="uid" type="int32" />
		<attr name="gid" type="int32" />
		<attr name="atime" type="date" />
		<attr name="mtime" type="date" />
		<attr name="ctime" type="date" />
	</record>

	<class name="File">
		<attr name="filename" type="str" set="false" />
		<method name="stat" type="StatRes" />
		<method name="read" type="buffer">
			<doc>reads up to 'count' bytes from the file</doc>
			<arg name="count" type="int32" />
		</method>
		<method name="write" type="void">
			<doc>writes the given buffer to the file</doc>
			<arg name="data" type="buffer" />
		</method>
		<method name="close" type="void" doc="closes the file" />
		<method name="flush" type="void" />
	</class>

	<class name="Path">
		<ctor>
			<arg name="fspath" type="str" />
		</ctor>

		<method name="isDir" type="bool"
			doc="tests whether this path points to a directory" />
		<method name="isFile" type="bool"
			doc="tests whether this path points to a file" />
		<method name="append" type="Path">
			<arg name="other" type="Path" />
		</method>
		<method name="up" type="Path" />
	</class>

	<func name="open" type="File">
		<doc>this function opens the given file with the given mode
			and returns
			a File instance</doc>
		<arg name="filename" type="str"
			doc="the filename to open (either relative or absolute)" />
		<arg name="mode" type="str"
			doc="the opening mode: 'r' for reading, 'w' for writing" />
	</func>

	<func name="copy" type="void">
		<arg name="src" type="File" />
		<arg name="dst" type="File" />
	</func>

</service>
















